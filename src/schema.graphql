# source: http://localhost:4000
# timestamp: Thu Jun 28 2018 15:14:53 GMT+0100 (British Summer Time)

type Fixture {
  id: ID!
  homeTeamName: String!
  awayTeamName: String!
  status: String!
  date: String!
  matchday: Int!
  result: Result
  picks: [Pick]!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Pick implements Node {
  id: ID!
  fixtureId: Int!
  choice: String!
  gameday: Int!
  matchday: Int!
  points: Int
  resolved: Boolean
  user(where: UserWhereInput): User!
}

enum PickOrderByInput {
  id_ASC
  id_DESC
  fixtureId_ASC
  fixtureId_DESC
  choice_ASC
  choice_DESC
  gameday_ASC
  gameday_DESC
  matchday_ASC
  matchday_DESC
  points_ASC
  points_DESC
  resolved_ASC
  resolved_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input PickWhereInput {
  """Logical AND on all given filters."""
  AND: [PickWhereInput!]

  """Logical OR on all given filters."""
  OR: [PickWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PickWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fixtureId: Int

  """All values that are not equal to given value."""
  fixtureId_not: Int

  """All values that are contained in given list."""
  fixtureId_in: [Int!]

  """All values that are not contained in given list."""
  fixtureId_not_in: [Int!]

  """All values less than the given value."""
  fixtureId_lt: Int

  """All values less than or equal the given value."""
  fixtureId_lte: Int

  """All values greater than the given value."""
  fixtureId_gt: Int

  """All values greater than or equal the given value."""
  fixtureId_gte: Int
  choice: String

  """All values that are not equal to given value."""
  choice_not: String

  """All values that are contained in given list."""
  choice_in: [String!]

  """All values that are not contained in given list."""
  choice_not_in: [String!]

  """All values less than the given value."""
  choice_lt: String

  """All values less than or equal the given value."""
  choice_lte: String

  """All values greater than the given value."""
  choice_gt: String

  """All values greater than or equal the given value."""
  choice_gte: String

  """All values containing the given string."""
  choice_contains: String

  """All values not containing the given string."""
  choice_not_contains: String

  """All values starting with the given string."""
  choice_starts_with: String

  """All values not starting with the given string."""
  choice_not_starts_with: String

  """All values ending with the given string."""
  choice_ends_with: String

  """All values not ending with the given string."""
  choice_not_ends_with: String
  gameday: Int

  """All values that are not equal to given value."""
  gameday_not: Int

  """All values that are contained in given list."""
  gameday_in: [Int!]

  """All values that are not contained in given list."""
  gameday_not_in: [Int!]

  """All values less than the given value."""
  gameday_lt: Int

  """All values less than or equal the given value."""
  gameday_lte: Int

  """All values greater than the given value."""
  gameday_gt: Int

  """All values greater than or equal the given value."""
  gameday_gte: Int
  matchday: Int

  """All values that are not equal to given value."""
  matchday_not: Int

  """All values that are contained in given list."""
  matchday_in: [Int!]

  """All values that are not contained in given list."""
  matchday_not_in: [Int!]

  """All values less than the given value."""
  matchday_lt: Int

  """All values less than or equal the given value."""
  matchday_lte: Int

  """All values greater than the given value."""
  matchday_gt: Int

  """All values greater than or equal the given value."""
  matchday_gte: Int
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  resolved: Boolean

  """All values that are not equal to given value."""
  resolved_not: Boolean
  user: UserWhereInput
}

input PickWhereUniqueInput {
  id: ID
}

type Query {
  fixtures(competitionId: ID!, timeFrameStart: String, timeFrameEnd: String, matchday: Int): [Fixture]!
  fixture(id: ID!): Fixture
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  user(where: PickWhereUniqueInput!): User!
  pick(where: UserWhereUniqueInput!): Pick!
  picks(where: PickWhereInput, orderBy: PickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pick]!
}

type Result {
  goalsHomeTeam: Int
  goalsAwayTeam: Int
}

type User implements Node {
  id: ID!
  name: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  _MagicalBackRelation_PickToUser_every: PickWhereInput
  _MagicalBackRelation_PickToUser_some: PickWhereInput
  _MagicalBackRelation_PickToUser_none: PickWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
