# source: http://localhost:4466
# timestamp: Wed Jun 27 2018 09:02:13 GMT+0100 (British Summer Time)

type AggregatePick {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPick(data: PickCreateInput!): Pick!
  createUser(data: UserCreateInput!): User!
  updatePick(data: PickUpdateInput!, where: PickWhereUniqueInput!): Pick
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePick(where: PickWhereUniqueInput!): Pick
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPick(where: PickWhereUniqueInput!, create: PickCreateInput!, update: PickUpdateInput!): Pick!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPicks(data: PickUpdateInput!, where: PickWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyPicks(where: PickWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pick implements Node {
  id: ID!
  fixtureId: Int!
  choice: String!
  gameday: Int!
  matchday: Int!
  points: Int
  resolved: Boolean
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PickConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PickEdge]!
  aggregate: AggregatePick!
}

input PickCreateInput {
  fixtureId: Int!
  choice: String!
  gameday: Int!
  matchday: Int!
  points: Int
  resolved: Boolean
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type PickEdge {
  """The item at the end of the edge."""
  node: Pick!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PickOrderByInput {
  id_ASC
  id_DESC
  fixtureId_ASC
  fixtureId_DESC
  choice_ASC
  choice_DESC
  gameday_ASC
  gameday_DESC
  matchday_ASC
  matchday_DESC
  points_ASC
  points_DESC
  resolved_ASC
  resolved_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PickPreviousValues {
  id: ID!
  fixtureId: Int!
  choice: String!
  gameday: Int!
  matchday: Int!
  points: Int
  resolved: Boolean
}

type PickSubscriptionPayload {
  mutation: MutationType!
  node: Pick
  updatedFields: [String!]
  previousValues: PickPreviousValues
}

input PickSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PickSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PickSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PickSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PickWhereInput
}

input PickUpdateInput {
  fixtureId: Int
  choice: String
  gameday: Int
  matchday: Int
  points: Int
  resolved: Boolean
  user: UserUpdateOneInput
}

input PickWhereInput {
  """Logical AND on all given filters."""
  AND: [PickWhereInput!]

  """Logical OR on all given filters."""
  OR: [PickWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PickWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fixtureId: Int

  """All values that are not equal to given value."""
  fixtureId_not: Int

  """All values that are contained in given list."""
  fixtureId_in: [Int!]

  """All values that are not contained in given list."""
  fixtureId_not_in: [Int!]

  """All values less than the given value."""
  fixtureId_lt: Int

  """All values less than or equal the given value."""
  fixtureId_lte: Int

  """All values greater than the given value."""
  fixtureId_gt: Int

  """All values greater than or equal the given value."""
  fixtureId_gte: Int
  choice: String

  """All values that are not equal to given value."""
  choice_not: String

  """All values that are contained in given list."""
  choice_in: [String!]

  """All values that are not contained in given list."""
  choice_not_in: [String!]

  """All values less than the given value."""
  choice_lt: String

  """All values less than or equal the given value."""
  choice_lte: String

  """All values greater than the given value."""
  choice_gt: String

  """All values greater than or equal the given value."""
  choice_gte: String

  """All values containing the given string."""
  choice_contains: String

  """All values not containing the given string."""
  choice_not_contains: String

  """All values starting with the given string."""
  choice_starts_with: String

  """All values not starting with the given string."""
  choice_not_starts_with: String

  """All values ending with the given string."""
  choice_ends_with: String

  """All values not ending with the given string."""
  choice_not_ends_with: String
  gameday: Int

  """All values that are not equal to given value."""
  gameday_not: Int

  """All values that are contained in given list."""
  gameday_in: [Int!]

  """All values that are not contained in given list."""
  gameday_not_in: [Int!]

  """All values less than the given value."""
  gameday_lt: Int

  """All values less than or equal the given value."""
  gameday_lte: Int

  """All values greater than the given value."""
  gameday_gt: Int

  """All values greater than or equal the given value."""
  gameday_gte: Int
  matchday: Int

  """All values that are not equal to given value."""
  matchday_not: Int

  """All values that are contained in given list."""
  matchday_in: [Int!]

  """All values that are not contained in given list."""
  matchday_not_in: [Int!]

  """All values less than the given value."""
  matchday_lt: Int

  """All values less than or equal the given value."""
  matchday_lte: Int

  """All values greater than the given value."""
  matchday_gt: Int

  """All values greater than or equal the given value."""
  matchday_gte: Int
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  resolved: Boolean

  """All values that are not equal to given value."""
  resolved_not: Boolean
  user: UserWhereInput
}

input PickWhereUniqueInput {
  id: ID
}

type Query {
  picks(where: PickWhereInput, orderBy: PickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pick]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  pick(where: PickWhereUniqueInput!): Pick
  user(where: UserWhereUniqueInput!): User
  picksConnection(where: PickWhereInput, orderBy: PickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PickConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  pick(where: PickSubscriptionWhereInput): PickSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  _MagicalBackRelation_PickToUser_every: PickWhereInput
  _MagicalBackRelation_PickToUser_some: PickWhereInput
  _MagicalBackRelation_PickToUser_none: PickWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
