type User {
  id: ID! @unique
  name: String!
  picks: [Pick!]!
  subs: [LeagueSubscription!]!
}

type Pick {
  id: ID! @unique
  team: Team!
  success: Boolean! @default(value: "false")
  resolved: Boolean! @default(value: "false")
  match: Match!
  user: User!
  leagueSubscription: LeagueSubscription!
}

type League {
  id: ID! @unique
  name: String!
  subs: [LeagueSubscription!]!
}

type LeagueSubscription {
  id: ID! @unique
  league: League!
  users: [User!]!
}

type Competition {
  id: ID! @unique
  apiId: Int! @unique
  name: String!
  area: String!
  seasons: [Season!]! @relation(name: "SeasonsByCompetition", onDelete: CASCADE)
}

type Season {
  id: ID! @unique
  apiId: Int! @unique
  startDate: String!
  endDate: String!
  currentMatchday: Int
  competition: Competition! @relation(name: "SeasonsByCompetition")
  matches: [Match!]!
}

type Team {
  id: ID! @unique
  apiId: Int! @unique
  name: String!
}

type Match {
  id: ID! @unique
  apiId: Int! @unique
  date: String!
  matchday: Int!
  stage: String!
  group: String!
  lastUpdated: String
  homeTeam: Team! @relation(name: "HomeTeam")
  awayTeam: Team! @relation(name: "AwayTeam")
  season: Season!
  winner: String
  duration: String
  fullTimeHome: Int
  fullTimeAway: Int
  halfTimeHome: Int
  halfTimeAway: Int
  extraTimeHome: Int
  extraTimeAway: Int
  penaltiesHome: Int
  penaltiesAway: Int
}
